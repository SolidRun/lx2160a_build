From 4b63feb4d9ba0da627949c3c268fd50ff2af452d Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Fri, 21 Feb 2025 16:43:37 +0100
Subject: [PATCH 29/35] device property: add function to lookup a string from
 array by index

Sometimes drivers need to access individual elements from an array of
string. of.h already provides a suitable function which is specific to
device-tree.

Add a new function device_property_read_string_index similar to the
existing device_property_read_* functions that can look-up a specific
index inside a multiple string property.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 drivers/base/property.c  | 55 ++++++++++++++++++++++++++++++++++++++++
 drivers/of/property.c    | 11 ++++++++
 include/linux/fwnode.h   |  5 ++++
 include/linux/property.h |  5 ++++
 4 files changed, 76 insertions(+)

diff --git a/drivers/base/property.c b/drivers/base/property.c
index 735a23db1b5e..3d192e237e93 100644
--- a/drivers/base/property.c
+++ b/drivers/base/property.c
@@ -206,6 +206,29 @@ int device_property_read_string(struct device *dev, const char *propname,
 }
 EXPORT_SYMBOL_GPL(device_property_read_string);
 
+/**
+ * device_property_read_string_index - find a string in an array by index
+ * @dev: Device to get the property of
+ * @propname: Name of the property holding the array
+ * @index: The index of the string in the list of strings
+ * @val: The value is stored here
+ *
+ * Finds given index in a string array and stores the value into @val
+ * if found.
+ *
+ * Return: %0 if the string was found (success),
+ *	   %-EINVAL if given arguments are not valid,
+ *	   %-ENODATA if the property does not have a value,
+ *	   %-EPROTO or %-EILSEQ if the property type is not a string.
+ *	   %-ENXIO if no suitable firmware interface is present.
+ */
+int device_property_read_string_index(struct device *dev, const char *propname,
+				      int index, const char **val)
+{
+	return fwnode_property_read_string_index(dev_fwnode(dev), propname, index, val);
+}
+EXPORT_SYMBOL_GPL(device_property_read_string_index);
+
 /**
  * device_property_match_string - find a string in an array and return index
  * @dev: Device to get the property of
@@ -412,6 +435,38 @@ int fwnode_property_read_string(const struct fwnode_handle *fwnode,
 }
 EXPORT_SYMBOL_GPL(fwnode_property_read_string);
 
+/**
+ * fwnode_property_read_string_index - find a string in an array by index
+ * @fwnode: Firmware node to get the property of
+ * @propname: Name of the property holding the array
+ * @index: The index of the string in the list of strings
+ * @val: The value is stored here
+ *
+ * Read property @propname from the given firmware node and store the value into
+ * @val if found.  The value is checked to be a string.
+ *
+ * Return: %0 if the string was found (success),
+ *	   %-EINVAL if given arguments are not valid,
+ *	   %-ENODATA if the property does not have a value,
+ *	   %-EPROTO or %-EILSEQ if the property is not a string,
+ *	   %-ENXIO if no suitable firmware interface is present.
+ */
+int fwnode_property_read_string_index(const struct fwnode_handle *fwnode,
+				      const char *propname, int index,
+				      const char **val)
+{
+	int ret;
+
+	if (IS_ERR_OR_NULL(fwnode))
+		return -EINVAL;
+
+	ret = fwnode_call_int_op(fwnode, property_read_string_index, propname,
+				 index, val);
+
+	return ret < 0 ? ret : 0;
+}
+EXPORT_SYMBOL_GPL(fwnode_property_read_string_index);
+
 /**
  * fwnode_property_match_string - find a string in an array and return index
  * @fwnode: Firmware node to get the property of
diff --git a/drivers/of/property.c b/drivers/of/property.c
index c1768719ee89..6ffcdec20db1 100644
--- a/drivers/of/property.c
+++ b/drivers/of/property.c
@@ -915,6 +915,16 @@ of_fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
 		of_property_count_strings(node, propname);
 }
 
+static int
+of_fwnode_property_read_string_index(const struct fwnode_handle *fwnode,
+				     const char *propname, int index,
+				     const char **val)
+{
+	const struct device_node *node = to_of_node(fwnode);
+
+	return of_property_read_string_index(node, propname, index, val);
+}
+
 static const char *of_fwnode_get_name(const struct fwnode_handle *fwnode)
 {
 	return kbasename(to_of_node(fwnode)->full_name);
@@ -1462,6 +1472,7 @@ const struct fwnode_operations of_fwnode_ops = {
 	.property_present = of_fwnode_property_present,
 	.property_read_int_array = of_fwnode_property_read_int_array,
 	.property_read_string_array = of_fwnode_property_read_string_array,
+	.property_read_string_index = of_fwnode_property_read_string_index,
 	.get_name = of_fwnode_get_name,
 	.get_name_prefix = of_fwnode_get_name_prefix,
 	.get_parent = of_fwnode_get_parent,
diff --git a/include/linux/fwnode.h b/include/linux/fwnode.h
index 2d68606fb725..06ce0cb8759d 100644
--- a/include/linux/fwnode.h
+++ b/include/linux/fwnode.h
@@ -92,6 +92,7 @@ struct fwnode_reference_args {
  *			     success, a negative error code otherwise.
  * @property_read_string_array: Read an array of string properties. Return zero
  *				on success, a negative error code otherwise.
+ * @property_read_string_index: Find a string in an array by index.
  * @get_name: Return the name of an fwnode.
  * @get_name_prefix: Get a prefix for a node (for printing purposes).
  * @get_parent: Return the parent of an fwnode.
@@ -122,6 +123,10 @@ struct fwnode_operations {
 	(*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
 				      const char *propname, const char **val,
 				      size_t nval);
+	int
+	(*property_read_string_index)(const struct fwnode_handle *fwnode_handle,
+				      const char *propname, int index,
+				      const char **val);
 	const char *(*get_name)(const struct fwnode_handle *fwnode);
 	const char *(*get_name_prefix)(const struct fwnode_handle *fwnode);
 	struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
diff --git a/include/linux/property.h b/include/linux/property.h
index 357513a977e5..c66b6b9f0dcd 100644
--- a/include/linux/property.h
+++ b/include/linux/property.h
@@ -46,6 +46,8 @@ int device_property_read_string_array(struct device *dev, const char *propname,
 				      const char **val, size_t nval);
 int device_property_read_string(struct device *dev, const char *propname,
 				const char **val);
+int device_property_read_string_index(struct device *dev, const char *propname,
+				      int index,const char **val);
 int device_property_match_string(struct device *dev,
 				 const char *propname, const char *string);
 
@@ -69,6 +71,9 @@ int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
 				      size_t nval);
 int fwnode_property_read_string(const struct fwnode_handle *fwnode,
 				const char *propname, const char **val);
+int fwnode_property_read_string_index(const struct fwnode_handle *fwnode,
+				      const char *propname, int index,
+				      const char **val);
 int fwnode_property_match_string(const struct fwnode_handle *fwnode,
 				 const char *propname, const char *string);
 int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
-- 
2.43.0

